metadata:
  annotations:
    configmap.keycloak.io/update-on-change: "keycloak"
    keycloak.io/target-platform: "openshift"
spec:
  replicas: 1
  strategy:
    type: Recreate
    recreateParams:
      timeoutSeconds: 7200
  template:
    metadata:
      annotations:
        pod.beta.kubernetes.io/init-containers: |-
          [{
             "name": "git-cloner",
             "image": "fabric8/builder-clients:0.11",
             "imagePullPolicy": "IfNotPresent",
             "command": [ "/bin/bash" ],
             "args": [
               "-c",
               "rm -rf /keycloak-theme/* && git clone ${KEYCLOAK_THEME_REPO} /keycloak-theme && cd /keycloak-theme"
             ],
             "volumeMounts": [{
               "name": "keycloak-theme",
               "mountPath": "/keycloak-theme"
             }]
           },{
            "name": "openshift-ca-pemtokeystore",
            "image": "jimmidyson/pemtokeystore:v0.2.0",
            "imagePullPolicy": "IfNotPresent",
            "args": [
              "-keystore", "/tls-keystore/openshift-truststore.jks",
              "-ca-file", "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
              "-ca-file", "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt",
              "-ca-dir", "/usr/share/ca-certificates/mozilla"
            ],
            "volumeMounts": [{
              "name": "keycloak-tls",
              "mountPath": "/tls-keystore"
            }]
          },
          {
            "name": "envvar-substitution",
            "image": "fabric8/envsubst-file:1.0.0",
            "imagePullPolicy": "IfNotPresent",
            "args": [
              "demo-realm.json"
            ],
            "env": [
              {
                "name": "KEYCLOAK_LOGIN_THEME",
                "valueFrom": {
                  "configMapKeyRef": {
                    "name": "keycloak",
                    "key": "keycloak.theme.name"
                  }
                }
              }
            ],
            "volumeMounts": [
            {
              "name": "keycloak-config",
              "mountPath": "/workdir/demo-realm.json",
              "subPath": "config/demo-realm.json"
            },
            {
              "name": "keycloak-subst-config",
              "mountPath": "/processed"
            }
            ]
          },
          {
            "name": "init-dependencyservice",
            "image": "fabric8/fabric8-dependency-wait-service:${dependency-wait-service.version}",
            "imagePullPolicy": "IfNotPresent",
            "command": ["sh", "-c", "fabric8-dependency-wait-service-linux-amd64 postgres://keycloak@keycloak-db:5432"],
            "env": [{
              "name": "DEPENDENCY_POLL_INTERVAL",
              "value": "1"
            }, {
              "name": "DEPENDENCY_LOG_VERBOSE",
              "value": "true"
            }]
          }]
    spec:
      initContainers:
      - name: git-cloner
        image: fabric8/builder-clients:0.11
        imagePullPolicy: IfNotPresent
        command:
        - "/bin/bash"
        args:
        - -c
        - rm -rf /keycloak-theme/* && git clone ${KEYCLOAK_THEME_REPO} /keycloak-theme && cd /keycloak-theme
        volumeMounts:
        - name: keycloak-theme
          mountPath: "/keycloak-theme"
      - name: openshift-ca-pemtokeystore
        image: jimmidyson/pemtokeystore:v0.2.0
        imagePullPolicy: IfNotPresent
        args:
        - -keystore
        - /tls-keystore/openshift-truststore.jks
        - -ca-file
        - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - -ca-file
        - /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        - -ca-dir
        - /usr/share/ca-certificates/mozilla
        volumeMounts:
        - name: keycloak-tls
          mountPath: "/tls-keystore"
      - name: envvar-substitution
        image: fabric8/envsubst-file:1.0.0
        imagePullPolicy: IfNotPresent
        args:
        - demo-realm.json
        env: []
        volumeMounts:
        - name: keycloak-config
          mountPath: "/workdir/demo-realm.json"
          subPath: config/demo-realm.json
        - name: keycloak-subst-config
          mountPath: "/processed"
      - name: init-dependencyservice
        image: fabric8/fabric8-dependency-wait-service:${dependency-wait-service.version}
        imagePullPolicy: IfNotPresent
        command:
        - "sh"
        - "-c"
        - "fabric8-dependency-wait-service-linux-amd64 postgres://keycloak@keycloak-db:5432"
        env:
        - name: DEPENDENCY_POLL_INTERVAL
          value: '1'
        - name: DEPENDENCY_LOG_VERBOSE
          value: 'true'
      containers:
      - image: fabric8/keycloak-postgres:${keycloak.version}
        args:
        - -b $(INTERNAL_POD_IP)
        - -Djgroups.bind_addr=global
        - -Djboss.node.name=$(INTERNAL_POD_IP)
        - -Djavax.net.ssl.trustStore=/opt/jboss/keycloak/standalone/configuration/tls/openshift-truststore.jks
        - -Dkeycloak.migration.action=import
        - -Dkeycloak.migration.provider=singleFile
        - -Dkeycloak.migration.file=/opt/jboss/keycloak/standalone/configuration/import/demo-realm.json
        - -Dkeycloak.migration.strategy=IGNORE_EXISTING
        env:
        - name: POSTGRES_PORT_5432_TCP_ADDR
          valueFrom:
            configMapKeyRef:
              name: keycloak
              key: db.url
        - name: POSTGRES_PORT_5432_TCP_PORT
          valueFrom:
            configMapKeyRef:
              name: keycloak
              key: db.port
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: keycloak
              key: db.name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: keycloak
              key: db.user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak
              key: db.password
        - name: OPERATING_MODE
          value: ${OPERATING_MODE}
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: keycloak
              key: kc.user
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak
              key: kc.password
        - name: KEYCLOAK_THEME_REPO
          valueFrom:
            configMapKeyRef:
              name: keycloak
              key: keycloak.theme.repo
        - name: KEYCLOAK_THEME_NAME
          valueFrom:
            configMapKeyRef:
              name: keycloak
              key: keycloak.theme.name
        readinessProbe:
          httpGet:
            path: "/auth"
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: "/auth"
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10
        resources:
          requests:
            memory: 500Mi
          limits:
            memory: 1Gi
        volumeMounts:
        - name: keycloak-tls
          mountPath: /opt/jboss/keycloak/standalone/configuration/tls
        - name: keycloak-subst-config
          mountPath: /opt/jboss/keycloak/standalone/configuration/import
        - name: keycloak-theme
          mountPath: /opt/jboss/keycloak/themes/${KEYCLOAK_THEME_NAME}
      volumes:
      - name: keycloak-tls
        emptyDir: {}
      - name: keycloak-subst-config
        emptyDir: {}
      - name: keycloak-config
        configMap:
          name: keycloak
          items:
          - key: demo-realm.json
            path: config/demo-realm.json
      - name: keycloak-theme
        emptyDir: {}
